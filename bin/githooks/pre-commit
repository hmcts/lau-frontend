#!/bin/bash

# Check if the version has changed at all. If so, assume the wanted change has been made.
diff=$(git diff origin/master package.json | grep '"version":')

if [[ -z $diff ]]; then
  echo "App version unchanged... bumping patch number"

  # Get the current patch number and increase by 1
  patch_version=$(grep '"version":' package.json | sed -n 's/.*"\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/p')
  bumped_version=$((patch_version+1))

  # Get the line number of the version property - This ensures sed does not modify other lines by accident
  version_line=$(grep -n '"version":' package.json)
  version_line=${version_line:0:1}

  # Set the new patch number
  if [ "$(uname)" == "Darwin" ]; then
    # On OSX -i requires an "extension" which will create a backup file. We don't want this so we set it to an empty string.
    sed -i "" "${version_line}s/.*\"\([0-9]*\).\([0-9]*\).\([0-9]*\).*/  \"version\": \"\1.\2.${bumped_version}\",/" package.json
  else
    sed -i "${version_line}s/.*\"\([0-9]*\).\([0-9]*\).\([0-9]*\).*/  \"version\": \"\1.\2.${bumped_version}\",/" package.json
  fi

  # Print the new app version
  new_version=$(grep '"version":' package.json | sed -n 's/.*"\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1.\2.\3/p')
  echo "App version now $new_version"

  # Stage package.json
  git add package.json

  exit 0
else
  echo "Version has been changed... assuming desired version is set"

  exit 0
fi
